// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3543.robot2017;

import org.usfirst.frc3543.robot2017.RobotMap.AutonomousMode;
import org.usfirst.frc3543.robot2017.commands.ArcadeDriveWithJoystick;
import org.usfirst.frc3543.robot2017.commands.BallPickupCommand;
import org.usfirst.frc3543.robot2017.commands.BoopGearDropCommand;
import org.usfirst.frc3543.robot2017.commands.CloseGearHolderCommand;
import org.usfirst.frc3543.robot2017.commands.DockGearCommand;
import org.usfirst.frc3543.robot2017.commands.DriveForwardByDistanceCommand;
import org.usfirst.frc3543.robot2017.commands.FeedbackApproachGearDropCommand;
import org.usfirst.frc3543.robot2017.commands.GearDropAutonomousCommandGroup;
import org.usfirst.frc3543.robot2017.commands.LiftRobotCommand;
import org.usfirst.frc3543.robot2017.commands.LocateGearDropUsingVisionCommand;
import org.usfirst.frc3543.robot2017.commands.LowerBallChuteCommand;
import org.usfirst.frc3543.robot2017.commands.LowerRobotCommand;
import org.usfirst.frc3543.robot2017.commands.MoveGearDumperCommand;
import org.usfirst.frc3543.robot2017.commands.OpenGearHolderCommand;
import org.usfirst.frc3543.robot2017.commands.PlaceGearCommand;
import org.usfirst.frc3543.robot2017.commands.RaiseBallChuteCommand;
import org.usfirst.frc3543.robot2017.commands.ResetEncodersCommand;
import org.usfirst.frc3543.robot2017.commands.RotateByAngleCommand;
import org.usfirst.frc3543.robot2017.commands.TankDriveWithJoysticks;
import org.usfirst.frc3543.robot2017.commands.ZigZagCommand;
import org.usfirst.frc3543.robot2017.util.NumberProvider;
import org.usfirst.frc3543.robot2017.util.SmartDashboardNumberProvider;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	
	public static final String GEARFINDER_ANGLE_KEY = "GearFinderAngle";
	public static final String GEARFINDER_SIZE_DIFF_KEY = "GearFinderSizeDiff";
	public static final String GEARFINDER_D2D_KEY = "GearFinderD2D";
	public static final String GEARFINDER_MODE = "GearFinderMode";
	public static final String GEARFINDER_FOUND_GEAR = "GearFinderStatus";
	public static final String GEARFINDER_BLOB_COUNT = "GearFinderBlobCount";
	public static final String GEARFINDER_LOCATION = "Gear Finder Location";
	public static final String GEARFINDER_CURVE_GAIN = "Gear Finder Curve Gain";
	public static final String GEARFINDER_SPEED_GAIN = "Gear Finder Speed Gain";
	
	public static final String GEARDROP_APPROACH_INIITAL_STATIC_DISTANCE = "GearDrop inital static distance (in)";	
	public static final String GEARDROP_APPROACH_INITIAL_STATIC_ROTATION = "GearDrop inital static angle (deg)";
	
	public static final String DEFAULT_LINEAR_GAIN = "Default Linear Gain";
	public static final String DEFAULT_ROTATION_GAIN = "Default Rotation Gain";
	public static final String DRIVELINE_GYRO = "Gyro";
	public static final String LIFT_GAIN = "Lift Gain";
	public static final String DRIVELINE_ENCODER_LEFT = "Left Encoder";
	public static final String DRIVELINE_ENCODER_RIGHT = "Right Encoder";
	public static final String DISTANCE_REMAINING = "Distance Remaining";
	public static final String WHEEL_ENCODER_DISTANCE_PER_PULSE = "Wheel encoder distance per pulse";
	
	public static final String GEAR_HOLDER_SERVO_OPEN_ANGLE = "Gear holder servo open angle";
	public static final String GEAR_HOLDER_SERVO_ANGLE = "Gear holder servo angle";

	public static final String GEARDROP_LEFT_INITIAL_DISTANCE = "Gear Drop Left Initial Distance";
	public static final String GEARDROP_RIGHT_INITIAL_DISTANCE = "Gear Drop Right Initial Distance";
	
	public static final String AUTONOMOUS_MODE = "Autonomous Mode";
	
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton speedControlButton;
    public Joystick leftJoystick;
    public Joystick rightJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public JoystickButton liftRobotButton;
    public JoystickButton lowerRobotButton;
    public JoystickButton liftRobotButton2;
    public JoystickButton lowerRobotButton2;
    
    public JoystickButton dropGearButton;
    public JoystickButton resumeArcadeDriveButton;
    public JoystickButton lowerBallDumperButton;
    public JoystickButton raiseBallDumperButton;   
    public JoystickButton openGearHolderButton;
    public JoystickButton closeGearHolderButton;   
    public JoystickButton tankDriveButton;   
    
    
    public OI() {
        FeedbackApproachGearDropCommand feedbackApproach = new FeedbackApproachGearDropCommand();

    	// Joysticks and buttons
        rightJoystick = new Joystick(1);        
        leftJoystick = new Joystick(0);
        
        liftRobotButton = new JoystickButton(rightJoystick, 6);
        liftRobotButton.whileHeld(new LiftRobotCommand());

        lowerRobotButton = new JoystickButton(rightJoystick, 7);
        lowerRobotButton.whileHeld(new LowerRobotCommand());

        liftRobotButton2 = new JoystickButton(rightJoystick, 11);
        liftRobotButton2.whileHeld(new LiftRobotCommand());
        
//        lowerRobotButton2 = new JoystickButton(rightJoystick, 10);
//        lowerRobotButton2.whileHeld(new LowerRobotCommand());

//        dropGearButton = new JoystickButton(rightJoystick, 11);
//        dropGearButton.whenPressed(feedbackApproach);
        
        ArcadeDriveWithJoystick arcade = new ArcadeDriveWithJoystick();
        resumeArcadeDriveButton = new JoystickButton(rightJoystick, 1);
        resumeArcadeDriveButton.whenPressed(arcade);
                
//        speedControlButton = new JoystickButton(leftJoystick, 1);
//        speedControlButton.whileHeld(new BallPickupCommand());
        
        lowerBallDumperButton = new JoystickButton(rightJoystick, 2);
        lowerBallDumperButton.whenPressed(new MoveGearDumperCommand(RobotMap.DEFAULT_GEAR_DUMPER_DOWN));

        raiseBallDumperButton = new JoystickButton(rightJoystick, 3);
        raiseBallDumperButton.whenPressed(new MoveGearDumperCommand(RobotMap.DEFAULT_GEAR_DUMPER_UP));

        openGearHolderButton = new JoystickButton(rightJoystick, 8);
        openGearHolderButton.whenPressed(new OpenGearHolderCommand());
        
        closeGearHolderButton = new JoystickButton(rightJoystick, 9);
        closeGearHolderButton.whenPressed(new CloseGearHolderCommand());

        closeGearHolderButton = new JoystickButton(leftJoystick, 1);
        closeGearHolderButton.whenPressed(new TankDriveWithJoysticks());

        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


        // SmartDashboard Buttons
        SmartDashboard.putData("LowerBallChuteCommand", new LowerBallChuteCommand());
        SmartDashboard.putData("RaiseBallChuteCommand", new RaiseBallChuteCommand());
        SmartDashboard.putData("ArcadeDriveWithJoystick", new ArcadeDriveWithJoystick());
        SmartDashboard.putData("TankDriveWithJoysticks", new TankDriveWithJoysticks());
        SmartDashboard.putData("BallPickupCommand", new BallPickupCommand());
        SmartDashboard.putData("Reset Encoders", new ResetEncodersCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        ////////////////////////////////////////////////////////////////
        /////////// Manually added items for the smart dashboard
        // Calibration Settings
        SmartDashboard.putNumber(WHEEL_ENCODER_DISTANCE_PER_PULSE, RobotMap.DEFAULT_DISTANCE_PER_PULSE);
        SmartDashboard.putNumber(DEFAULT_LINEAR_GAIN, RobotMap.DEFAULT_LINEAR_GAIN);
        SmartDashboard.putNumber(DEFAULT_ROTATION_GAIN, RobotMap.DEFAULT_ROTATION_GAIN);   
        SmartDashboard.putNumber(LIFT_GAIN, RobotMap.DEFAULT_LIFT_GAIN);   
        
        // Gear holder
        SmartDashboard.putNumber(OI.GEAR_HOLDER_SERVO_OPEN_ANGLE, 120);
        SmartDashboard.putData("Open Gear Holder", new OpenGearHolderCommand());
        SmartDashboard.putData("Close Gear Holder", new CloseGearHolderCommand());

        SmartDashboard.putNumber(OI.GEAR_HOLDER_SERVO_ANGLE, 0);
        
        SmartDashboard.putData("Move Gear Dropper", new MoveGearDumperCommand(new SmartDashboardNumberProvider(OI.GEAR_HOLDER_SERVO_ANGLE, 0.0)));

        SmartDashboard.putData("Boop Gear Dropper", new BoopGearDropCommand());
        SmartDashboard.putData("Drop Gear", new PlaceGearCommand(RobotMap.DEFAULT_LINEAR_GAIN));

        // Sensor Output
        SmartDashboard.putNumber(DRIVELINE_ENCODER_LEFT, 0);
        SmartDashboard.putNumber(DRIVELINE_ENCODER_RIGHT, 0);        
        SmartDashboard.putNumber(DRIVELINE_GYRO, 0);

        // State Settings
        OI.dashboard.putAutonomousMode(RobotMap.AutonomousMode.MIDDLE);
        
        // Gear Drop Settings
        SmartDashboard.putNumber(GEARFINDER_CURVE_GAIN, RobotMap.GEAR_APPROACH_CURVE_GAIN);
        SmartDashboard.putNumber(GEARFINDER_SPEED_GAIN, RobotMap.GEAR_APPROACH_SPEED_GAIN);
        SmartDashboard.putNumber(GEARDROP_APPROACH_INIITAL_STATIC_DISTANCE, 220);
        SmartDashboard.putNumber(GEARDROP_APPROACH_INITIAL_STATIC_ROTATION, -56);
        
        SmartDashboard.putNumber(GEARDROP_LEFT_INITIAL_DISTANCE, RobotMap.DEFAULT_AUTONOMOUS_LEFT_DISTANCE);
        SmartDashboard.putNumber(GEARDROP_RIGHT_INITIAL_DISTANCE, RobotMap.DEFAULT_AUTONOMOUS_RIGHT_DISTANCE);

        // Gear Drop Commands
        SmartDashboard.putData("Locate Gear Drop", new LocateGearDropUsingVisionCommand(5));
        SmartDashboard.putData("Approach Gear Drop", feedbackApproach);       
        SmartDashboard.putData("Position and Approach Gear Drop", new GearDropAutonomousCommandGroup());    

        // Gear Drop Output
        SmartDashboard.putString(GEARFINDER_LOCATION, "NONE");
        SmartDashboard.putNumber(DISTANCE_REMAINING, 0);

        // Lift mechanism Commands        
        SmartDashboard.putData("Lift Robot", new LiftRobotCommand());
        SmartDashboard.putData("Lower Robot", new LowerRobotCommand());
        
        // Motion commands
        SmartDashboard.putData("Rotate 90 degrees", new RotateByAngleCommand(Math.toRadians(90), 0.3));       
        SmartDashboard.putData("Zig Zag", new ZigZagCommand(Math.toRadians(15), 24));   
        
        SmartDashboard.putNumber("Drive Forward Distance", 12);   
        SmartDashboard.putData("Drive Forward", new DriveForwardByDistanceCommand(new SmartDashboardNumberProvider("Drive Forward Distance", 12)));       

        // Not used anymore
//        SmartDashboard.putString(GEARFINDER_MODE, "off");
//        SmartDashboard.putBoolean(GEARFINDER_FOUND_GEAR, false);
//        SmartDashboard.putNumber(GEARFINDER_BLOB_COUNT, 0);
                        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public static final Dashboard dashboard = new Dashboard();
    
    public static class Dashboard {
    	
    	public void putGearfinderLocation(String s) {
    		SmartDashboard.putString(GEARFINDER_LOCATION, s);
    	}

		public void putAutonomousMode(AutonomousMode mode) {
			String s;
			switch (mode) {
			case LEFT:
				s = "left";
				putAutonomousModeValues(SmartDashboard.getNumber(OI.GEARDROP_LEFT_INITIAL_DISTANCE, RobotMap.DEFAULT_AUTONOMOUS_LEFT_DISTANCE), RobotMap.DEFAULT_AUTONOMOUS_LEFT_ANGLE);
				break;
			case MIDDLE:
				s = "middle";
				putAutonomousModeValues(RobotMap.DEFAULT_AUTONOMOUS_MIDDLE_DISTANCE, RobotMap.DEFAULT_AUTONOMOUS_MIDDLE_ANGLE);				
				break;
			case RIGHT:
				s = "right";
				putAutonomousModeValues(SmartDashboard.getNumber(OI.GEARDROP_RIGHT_INITIAL_DISTANCE, RobotMap.DEFAULT_AUTONOMOUS_RIGHT_DISTANCE), RobotMap.DEFAULT_AUTONOMOUS_RIGHT_ANGLE);				
				break;
			default:
				s = "undefined";
				putAutonomousModeValues(0,0);
				break;
			}			
			SmartDashboard.putString(AUTONOMOUS_MODE, s);
		}
		
		public void putAutonomousModeValues(double distance, double angleInDegrees) {
			SmartDashboard.putNumber(GEARDROP_APPROACH_INIITAL_STATIC_DISTANCE, distance);
			SmartDashboard.putNumber(GEARDROP_APPROACH_INITIAL_STATIC_ROTATION, angleInDegrees);
		}

		public void putDistanceRemaining(double d) {
	        SmartDashboard.putNumber(OI.DISTANCE_REMAINING, round(d,1));			
		}
		
		public void putDrivelineEncoders(double left, double right) {
	        SmartDashboard.putNumber(OI.DRIVELINE_ENCODER_LEFT, round(left,1));
	        SmartDashboard.putNumber(OI.DRIVELINE_ENCODER_RIGHT, round(right,1));
		}
		
		public void putDrivelineGyro(double angleInDegrees) {
	        SmartDashboard.putNumber(OI.DRIVELINE_GYRO, round(angleInDegrees,1));
		}

		public double getWheelEncoderDistancePerPulse() {
			return SmartDashboard.getNumber(OI.WHEEL_ENCODER_DISTANCE_PER_PULSE, Robot.geometry.encoderDistancePerPulse);
		}

		public double getGearHolderServoOpenAngle() {
			return SmartDashboard.getNumber(OI.GEAR_HOLDER_SERVO_OPEN_ANGLE, RobotMap.DEFAULT_GEAR_HOLDER_SERVO_OPEN_ANGLE);
		}
		
		private double round(double num, int decimals) {
			double p = 10;
			if (decimals == 0) p = 1;
			else if (decimals == 1) p = 10;
			else p = Math.pow(10, decimals);
			return Math.round(num * p) / p;
		}
    }
}

