// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3543.robot2017.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc3543.robot2017.Robot;
import org.usfirst.frc3543.robot2017.RobotMap.AutonomousMode;
import org.usfirst.frc3543.robot2017.subsystems.*;

/**
 * Default autonomous command for 2017
 * 
 * Ensure the gear holder is open, then run the autonomous gear drop
 * command group.  Make sure the mode switches on the robot are correct 
 * first!
 */
public class DefaultAutonomousCommand extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public DefaultAutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	requires(Robot.robotState);
    	requires(Robot.driveLine);
//    	addSequential(new OpenGearHolderCommand());
    	// This default version gets its distance/angle from the smart dashboard    	
    	addSequential(new GearDropAutonomousCommandGroup());
    } 
    
    @Override
    protected void initialize() {
    	// get the command mode from the robotState, update the dashboard
    	// this will set the distance/angle based on the robotState switches
    	Robot.driveLine.resetEncoders();
    	Robot.driveLine.resetGyro();
    	Robot.robotState.updateDashboard();
    }
}
