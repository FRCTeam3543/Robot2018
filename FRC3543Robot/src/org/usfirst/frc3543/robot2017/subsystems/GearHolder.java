// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3543.robot2017.subsystems;

import org.usfirst.frc3543.robot2017.OI;
import org.usfirst.frc3543.robot2017.Robot;
import org.usfirst.frc3543.robot2017.RobotMap;
import org.usfirst.frc3543.robot2017.commands.*;

import edu.wpi.first.wpilibj.Servo;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * Subsystem for the gear holder, which starts inside the robot envelope and the gets deployed.
 * 
 * This abstracts the underlying implementation (a servo that opens a latch) with
 * high-level open() and close() methods.
 * 
 * @author MK
 */
public class GearHolder extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Servo gearHolderServo = RobotMap.gearHolderGearHolderServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private boolean _open = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
//    	setDefaultCommand(new OpenGearHolderCommand());
    	setAngle(45);
    }
        
    public void open() {    	
    	double targetAngle = OI.dashboard.getGearHolderServoOpenAngle();
    	gearHolderServo.setAngle(targetAngle);
    	_open = true;
    }

    public void close() {
//    	double targetAngle = OI.dashboard.getGearHolderServoOpenAngle();
//    	Robot.LOGGER.info("Set target angle "+targetAngle);
    	gearHolderServo.setAngle(0);
    	_open = false;
    }
    
    public void setPosition(double pos) {
    	gearHolderServo.setPosition(pos);
    }

    public double getPosition() {
    	return gearHolderServo.getPosition();
    }
    
    public void setAngle(double angleInDegrees) {
    	gearHolderServo.setAngle(angleInDegrees);
    }
    
    public void boop() {
    	gearHolderServo.setAngle(10); // 10 degrees
    	_open = true;
    }
    
    public boolean isOpen() {
    	return _open;
    }
    
    public double getAngle() {
    	return gearHolderServo.getAngle();
    }

	public void stop() {
		gearHolderServo.setDisabled();		
	}
    
}

