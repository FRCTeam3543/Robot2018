package org.usfirst.frc.team3543.robot;

public class RecordedPaths {
	public static final String NONE = "NONE;0,0;";
	public static final String DRIVE_OVER_LINE = "FIXME;0,0;";	// FIXME - record this (drive over point line)
	public static final int LAST = 0;
	///////////// Paths /////////////////
	// Add recorded paths here
	public static final String [] PATHS = {
		NONE
		,"TEST PATH;0.0000,0.0000;0.0000,0.0000;0.0000,0.0000;0.0000,0.0000;0.0000,0.0000;0.0000,0.0000;0.0000,0.0000;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0001,-0.0001;-0.0005,-0.0005;-0.0022,-0.0022;-0.0039,-0.0039;-0.0074,-0.0074;-0.0103,-0.0103;-0.0156,-0.0156;-0.0269,-0.0269;-0.0413,-0.0413;-0.0706,-0.0706;-0.0928,-0.0928;-0.0928,-0.0928;-0.1026,-0.0996;-0.1182,-0.1151;-0.1292,-0.1261;-0.1292,-0.1261;-0.1465,-0.1435;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1588,-0.1557;-0.1780,-0.1749;-0.1780,-0.1749;-0.1780,-0.1749;-0.1780,-0.1749;-0.1983,-0.1953;-0.1983,-0.1953;-0.1983,-0.1953;-0.1983,-0.1953;-0.1983,-0.1953;-0.1983,-0.1953;-0.2125,-0.2094;-0.2125,-0.2094;-0.2125,-0.2094;-0.2125,-0.2094;-0.2125,-0.2094;-0.2125,-0.2094;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2346,-0.2316;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2470;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.2500,-0.2450;-0.1983,-0.1933;-0.1588,-0.1537;-0.1588,-0.1585;-0.1182,-0.1182;-0.1026,-0.1026;-0.0791,-0.0791;-0.0587,-0.0587;-0.0198,-0.0198;-0.0039,-0.0039;0.0000,0.0000;0.0000,0.0000;0.0002,0.0002;0.0002,0.0002;0.0030,0.0030;0.0050,0.0050;0.0089,0.0089;0.0089,0.0089;0.0089,0.0089;0.0089,0.0089;0.0122,0.0122;0.0179,0.0179;0.0248,0.0248;0.0452,0.0452;0.0558,0.0558;0.0635,0.0635;0.0635,0.0635;0.0760,0.0760;0.0760,0.0760;0.0760,0.0760;0.0760,0.0760;0.0760,0.0760;0.0760,0.0760;0.0760,0.0760;0.0849,0.0849;0.0849,0.0849;0.0992,0.0992;0.0992,0.0992;0.0992,0.0992;0.1094,0.1094;0.1094,0.1094;0.1256,0.1256;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1550,0.1550;0.1742,0.1742;0.1711,0.1742;0.2055,0.2086;0.2055,0.2086;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2202,0.2232;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2509,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.2489,0.2540;0.1876,0.1876;0.1742,0.1742;0.1742,0.1742;0.1742,0.1742;0.1550,0.1550;0.1428,0.1428;0.1428,0.1428;0.1428,0.1428;0.1256,0.1256;0.1094,0.1094;0.0760,0.0760;0.0760,0.0760;0.0452,0.0452;0.0050,0.0050;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;0.0001,-0.0001;"
	};	
	
	// Goes LEFT, MIDDLE, RIGHT for robot, then LEFT/RIGHT, LEFT/RIGHT, LEFT/RIGHT
	// Replace NONE/NONE with the recorded path for that starting position and target
	public static final String[][] AUTONOMOUS = {
			// robot position left
			{
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE
			},
			// robot position middle
			{
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE				
			},
			// robot position right
			{
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE,
				DRIVE_OVER_LINE				
			}
	};
	
	// TODO - turn this into an Autonomous command selection
	public static AutonomousTarget chooseAutonomousTarget() {
		int robotLocation = GameData.getInstance().getLocation();
		// these are my paths
		String[] paths = AUTONOMOUS[robotLocation];
		String path;
		boolean middle = false;
		// now decide
		// if we are middle, just pick the closest near-drop
		if (robotLocation == GameData.ROBOT_MIDDLE) {			
			int side = GameData.getInstance().getPosition(0);
			path = paths[side];	// 0 or 1 in this array (close-left or close-right)
		}
		else {
			// if we are left or right, see if we have the center drop on our side, if so pick it			
			if (robotLocation == GameData.ROBOT_LEFT && GameData.getInstance().getPosition(1) == GameData.PLACE_LEFT) {
				middle = true;
				path = paths[2];
			}
			else if (robotLocation == GameData.ROBOT_RIGHT && GameData.getInstance().getPosition(1) == GameData.PLACE_RIGHT) {
				middle = true;
				path = paths[3];				
			}
			// otherwise pick the nearest on our side, if available
			else if (robotLocation == GameData.ROBOT_LEFT && GameData.getInstance().getPosition(0) == GameData.PLACE_LEFT) {
				path = paths[0];
			}
			else if (robotLocation == GameData.ROBOT_RIGHT && GameData.getInstance().getPosition(0) == GameData.PLACE_RIGHT) {
				path = paths[1];
			}
			// otherwise try for the farthest on our side, if available
			else if (robotLocation == GameData.ROBOT_LEFT && GameData.getInstance().getPosition(2) == GameData.PLACE_LEFT) {
				path = paths[5];
			}
			else if (robotLocation == GameData.ROBOT_RIGHT && GameData.getInstance().getPosition(2) == GameData.PLACE_RIGHT) {
				path = paths[6];
			}
			// oh well, just drive over the line
			else {
				path = DRIVE_OVER_LINE;
			}			
		}
		return AutonomousTarget.create(path, middle);
	}
		
}
