// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3543.robot;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
<<<<<<< HEAD
=======

import org.usfirst.frc.team3543.robot.util.Config;
import org.usfirst.frc.team3543.robot.util.RobotConfig;

import com.ctre.CANTalon;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.*;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
>>>>>>> branch 'mk-recording' of https://github.com/FRCTeam3543/Robot2018.git

import org.usfirst.frc.team3543.robot.util.Config;
import org.usfirst.frc.team3543.robot.util.RobotConfig;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap implements RobotConfig {
	private Config<Double> calibration = new Config<>();
	private Config<Integer> wiring = new Config<>();
//	private Config<Boolean> flags = new Config<>();
		
	// This holds a singleton instance
	private static RobotMap _instance = new RobotMap();
	
	public enum AutonomousMode {
		LEFT,
		MIDDLE,
		RIGHT
	};
	
	/**
	 * This fetches the singleton instance
	 * @return
	 */
	public static RobotMap getInstance() {
		return _instance;
	}
	
	public RobotMap initFromPropertyFiles() {
		Robot.LOGGER.info("Initialize RobotMap from property files");
		Properties wiringProps = loadFromFileOnClasspath("wiring.properties");
		Properties calibrationProps = loadFromFileOnClasspath("calibration.properties");			
		this.initWiring(wiringProps);
		this.initCalibration(calibrationProps);	
		return this;
	}
	
	
	private Properties loadFromStream(InputStream is) throws IOException {
		if (is == null) {
			throw new RuntimeException("Null InputStream");
		}
		Properties props = new Properties();
		props.load(is);		
		return props;		
	}
	
	private Properties loadFromFileOnClasspath(String propsFile) {
		try {
			return loadFromStream(getClass().getResourceAsStream(propsFile));
		} catch (IOException e) {
			Robot.LOGGER.warning(String.format("Could not find %s on classpath", propsFile));
			throw new IllegalArgumentException(e);
		}
	}	
	protected void initWiring(Properties props) {
		this.wiring = new Config<Integer>();
		for (Object k : props.keySet()) {
			String key = String.valueOf(k);
			this.wiring.put(key, Integer.valueOf(props.getProperty(key)));
		}
	}

	protected void initCalibration(Properties props) {
		this.calibration = new Config<Double>();
		for (Object k : props.keySet()) {
			String key = String.valueOf(k);
			this.calibration.put(key, Double.valueOf(props.getProperty(key)));
		}
	}
	
    public static final int TALON_FRONT_LEFT = 1;
    public static final int TALON_BACK_LEFT = 2;
    public static final int TALON_FRONT_RIGHT = 3;
    public static final int TALON_BACK_RIGHT = 4;
    
	public static final String AXIS_CAMERA_HOST = "10.35.43.11";
    public static final int USB_CAMERA_PORT = 0;
    public static final double GEAR_APPROACH_SPEED_GAIN = 0.20;	// gain function for the gear-approach feedback controller 
    public static final double GEAR_APPROACH_CURVE_GAIN = -1;	// gain function for the gear-approach feedback controller 
    
    public static final double GEAR_SEARCH_GAIN = 0.4;	// gain function for the gear-search feedback controller
	public static final double MAX_SPEED = 0.25;
	public static final double MIN_SPEED = 0.12;	
    public static final double DEFAULT_DISTANCE_PER_PULSE = 0.0284; // this is comp
    
    
    public static final double GYRO_SENSITIVITY = 0.0019;	// volts per degree per second
    public static final double GYRO_FEEDBACK_GAIN = 35;	// volts per degree per second based on full turn at 15 degrees off
    
    public static final double DEFAULT_LINEAR_GAIN = 0.25;
    public static final double DEFAULT_ROTATION_GAIN = 0.27;
    
<<<<<<< HEAD
<<<<<<< HEAD
    // baseline is 7ft 9.25 in out - calc how far to go out and turn
    // 
    public static final double DEFAULT_AUTONOMOUS_LEFT_DISTANCE = 72;
    public static final double DEFAULT_AUTONOMOUS_LEFT_ANGLE = 60;

    public static final double DEFAULT_AUTONOMOUS_RIGHT_DISTANCE = 72;
    public static final double DEFAULT_AUTONOMOUS_RIGHT_ANGLE = -DEFAULT_AUTONOMOUS_LEFT_ANGLE;

    public static final double DEFAULT_AUTONOMOUS_MIDDLE_DISTANCE = 50;	// inches
    public static final double DEFAULT_AUTONOMOUS_MIDDLE_ANGLE = 0;    
    
    public static final double DEFAULT_GEAR_HOLDER_SERVO_OPEN_ANGLE = 360;

    public static final double DEFAULT_GEAR_DUMPER_UP = 180;
    public static final double DEFAULT_GEAR_DUMPER_DOWN = 40;
    public static final double DEFAULT_GEAR_DUMPER_BOOP = 90; // degrees
    public static final double DEFAULT_GEAR_DUMPER_BACKUP = 24; // inches
    public static final double DEFAULT_GEAR_DUMPER_BOOP_WAIT = 2; // seconds
    		
    public static final int COMPRESSOR_PORT = 0;
    
    public static void init() {
=======
    public void init() {
>>>>>>> branch 'mk-recording' of https://github.com/FRCTeam3543/Robot2018.git
    	
//    	clawDoubleSolenoid = new DoubleSolenoid(0, 1);
    	
//        driveLineCANTalon1 = new WPI_TalonSRX(TALON_FRONT_LEFT);       
////        LiveWindow.addActuator("DriveLine", "CAN Talon 1", driveLineCANTalon1);
//        
//        driveLineCANTalon2 = new WPI_TalonSRX(TALON_BACK_LEFT);
////        LiveWindow.addActuator("DriveLine", "CAN Talon 2", driveLineCANTalon2);
//        
//        driveLineCANTalon3 = new WPI_TalonSRX(TALON_FRONT_RIGHT);
////        LiveWindow.addActuator("DriveLine", "CAN Talon 3", driveLineCANTalon3);
//        
//        driveLineCANTalon4 = new WPI_TalonSRX(TALON_BACK_RIGHT);
////        LiveWindow.addActuator("DriveLine", "CAN Talon 4", driveLineCANTalon4);
//        
//        driveLineRobotDrive = new RobotDrive(driveLineCANTalon1, driveLineCANTalon2,driveLineCANTalon3,driveLineCANTalon4);
        
<<<<<<< HEAD
        driveLineCANTalon2 = new WPI_TalonSRX(TALON_BACK_LEFT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 2", driveLineCANTalon2);
        
        driveLineCANTalon3 = new WPI_TalonSRX(TALON_FRONT_RIGHT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 3", driveLineCANTalon3);
        
        driveLineCANTalon4 = new WPI_TalonSRX(TALON_BACK_RIGHT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 4", driveLineCANTalon4);
        
        driveLineRobotDrive = new RobotDrive(driveLineCANTalon1, driveLineCANTalon2,driveLineCANTalon3,driveLineCANTalon4);
        
        driveLineRobotDrive.setSafetyEnabled(true);
        driveLineRobotDrive.setExpiration(0.1);
        driveLineRobotDrive.setSensitivity(0.5);
        driveLineRobotDrive.setMaxOutput(1.0);

        driveLineAnalogGyro1 = new AnalogGyro(1);
        LiveWindow.addSensor("DriveLine", "AnalogGyro 1", driveLineAnalogGyro1);
        driveLineAnalogGyro1.setSensitivity(0.007);
//        driveLineQuadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
        driveLineQuadratureEncoderLeft = new Encoder(2, 3, false, EncodingType.k2X);
        
        LiveWindow.addSensor("DriveLine", "QuadratureEncoderLeft", driveLineQuadratureEncoderLeft);
        driveLineQuadratureEncoderLeft.setDistancePerPulse(-0.05);
        driveLineQuadratureEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
//        driveLineQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        driveLineQuadratureEncoderRight = new Encoder(0, 1, false, EncodingType.k2X);
        
        LiveWindow.addSensor("DriveLine", "QuadratureEncoderRight", driveLineQuadratureEncoderRight);
        driveLineQuadratureEncoderRight.setDistancePerPulse(0.05);
        driveLineQuadratureEncoderRight.setPIDSourceType(PIDSourceType.kRate);
=======
//        driveLineRobotDrive.setSafetyEnabled(true);
//        driveLineRobotDrive.setExpiration(0.1);
//        driveLineRobotDrive.setSensitivity(0.5);
//        driveLineRobotDrive.setMaxOutput(1.0);
//
//        driveLineAnalogGyro1 = new AnalogGyro(1);
//        LiveWindow.addSensor("DriveLine", "AnalogGyro 1", driveLineAnalogGyro1);
//        driveLineAnalogGyro1.setSensitivity(0.007);
////        driveLineQuadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
//        driveLineQuadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k2X);
//        
//        LiveWindow.addSensor("DriveLine", "QuadratureEncoderLeft", driveLineQuadratureEncoderLeft);
//        driveLineQuadratureEncoderLeft.setDistancePerPulse(0.05);
//        driveLineQuadratureEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
////        driveLineQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
//        driveLineQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k2X);
//        
//        LiveWindow.addSensor("DriveLine", "QuadratureEncoderRight", driveLineQuadratureEncoderRight);
//        driveLineQuadratureEncoderRight.setDistancePerPulse(0.05);
//        driveLineQuadratureEncoderRight.setPIDSourceType(PIDSourceType.kRate);
>>>>>>> branch 'mk-recording' of https://github.com/FRCTeam3543/Robot2018.git
//        ballPickupSubsystemBallDumpServo1 = new Servo(1);
//        LiveWindow.addActuator("BallPickupSubsystem", "BallDumpServo1", ballPickupSubsystemBallDumpServo1);
//        
//        ballPickupSubsystemBallDumpServo2 = new Servo(2);
//        LiveWindow.addActuator("BallPickupSubsystem", "BallDumpServo2", ballPickupSubsystemBallDumpServo2);
//        
//        ballPickupSubsystemVictorSpeedController = new Victor(0);
//        LiveWindow.addActuator("BallPickupSubsystem", "VictorSpeedController", (Victor) ballPickupSubsystemVictorSpeedController);
//        
//        liftSubsystemCANTalon5 = new Talon(5);
//        LiveWindow.addActuator("LiftSubsystem", "CAN Talon 5", liftSubsystemCANTalon5);
//        
//        liftSubsystemCANTalon6 = new Talon(6);
//        LiveWindow.addActuator("LiftSubsystem", "CAN Talon 6", liftSubsystemCANTalon6);
//        
//        liftSubsystemLiftSubsystemDrive = new RobotDrive(liftSubsystemCANTalon5, liftSubsystemCANTalon6);
//        
//        liftSubsystemLiftSubsystemDrive.setSafetyEnabled(true);
//        liftSubsystemLiftSubsystemDrive.setExpiration(0.1);
//        liftSubsystemLiftSubsystemDrive.setSensitivity(0.5);
//        liftSubsystemLiftSubsystemDrive.setMaxOutput(1.0);
//
//        liftSubsystemLiftSubsystemQuadratureEncoder = new Encoder(8, 9, false, EncodingType.k4X);
//        LiveWindow.addSensor("LiftSubsystem", "LiftSubsystemQuadratureEncoder", liftSubsystemLiftSubsystemQuadratureEncoder);
//        liftSubsystemLiftSubsystemQuadratureEncoder.setDistancePerPulse(1.0);
//        liftSubsystemLiftSubsystemQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
//        robotStateAutonomousMode = new DigitalInput(4);
//        LiveWindow.addSensor("RobotState", "AutonomousMode", robotStateAutonomousMode);
//        
//        robotStateAutonomousSide = new DigitalInput(5);
//        LiveWindow.addSensor("RobotState", "AutonomousSide", robotStateAutonomousSide);
//        
//        gearHolderGearHolderServo = new Servo(3);
//        LiveWindow.addActuator("GearHolder", "GearHolderServo", gearHolderGearHolderServo);
//        
<<<<<<< HEAD

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
=======
    public void init() {
    	 
>>>>>>> branch 'master' of https://github.com/FRCTeam3543/Robot2018.git
=======
>>>>>>> branch 'mk-recording' of https://github.com/FRCTeam3543/Robot2018.git
    }

	@Override
	public Config<Integer> getWiringConfig() {
		return this.wiring;
	}

	@Override
	public Config<Double> getCalibrationConfig() {
		return this.calibration;
	}
<<<<<<< HEAD
=======

//	@Override
//	public Config<Boolean> getFlagConfig() {
//		return this.flags;
//	}
>>>>>>> branch 'mk-recording' of https://github.com/FRCTeam3543/Robot2018.git
        
}
