// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3543.robot;

import com.ctre.CANTalon;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.*;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
	public enum AutonomousMode {
		LEFT,
		MIDDLE,
		RIGHT
	};
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveLineCANTalon1;
    public static WPI_TalonSRX driveLineCANTalon2;
    public static WPI_TalonSRX driveLineCANTalon3;
    public static WPI_TalonSRX driveLineCANTalon4;
    public static RobotDrive driveLineRobotDrive;
    public static AnalogGyro driveLineAnalogGyro1;
    public static Encoder driveLineQuadratureEncoderLeft;
    public static Encoder driveLineQuadratureEncoderRight;
    public static Servo ballPickupSubsystemBallDumpServo1;
    public static Servo ballPickupSubsystemBallDumpServo2;
    public static SpeedController ballPickupSubsystemVictorSpeedController;
    public static Talon liftSubsystemCANTalon5;
    public static Talon liftSubsystemCANTalon6;
    public static Encoder liftSubsystemLiftSubsystemQuadratureEncoder;
    public static DigitalInput robotStateAutonomousMode;
    public static DigitalInput robotStateAutonomousSide;
    public static Servo gearHolderGearHolderServo;
    public static DoubleSolenoid clawDoubleSolenoid;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final int TALON_FRONT_LEFT = 1;
    public static final int TALON_BACK_LEFT = 2;
    public static final int TALON_FRONT_RIGHT = 3;
    public static final int TALON_BACK_RIGHT = 4;
    
	public static final String AXIS_CAMERA_HOST = "10.35.43.11";
    public static final int USB_CAMERA_PORT = 0;
    public static final double GEAR_APPROACH_SPEED_GAIN = 0.20;	// gain function for the gear-approach feedback controller 
    public static final double GEAR_APPROACH_CURVE_GAIN = -1;	// gain function for the gear-approach feedback controller 
    
    public static final double GEAR_SEARCH_GAIN = 0.4;	// gain function for the gear-search feedback controller
	public static final double MAX_SPEED = 0.25;
	public static final double MIN_SPEED = 0.12;	
    public static final double DRIVELINE_TIMER_DELAY = 0.01;	// delay passed to Timer.delay() on driveline calls
    //public static final double DEFAULT_DISTANCE_PER_PULSE = 0.05; // this is comp
    public static final double DEFAULT_DISTANCE_PER_PULSE = 0.0284; // this is comp
    
    //public static final double DEFAULT_DISTANCE_PER_PULSE = 0.068;
    
    public static final double GYRO_SENSITIVITY = 0.0019;	// volts per degree per second
    public static final double GYRO_FEEDBACK_GAIN = 35;	// volts per degree per second based on full turn at 15 degrees off
    
//    public static final double DRIVELINE_GYRO_SENSITIVITY = 0.007;	// volts per degree per second, drive line straight
    public static final double DEFAULT_LINEAR_GAIN = 0.25;
    public static final double DEFAULT_ROTATION_GAIN = 0.27;
    public static final double DEFAULT_LIFT_GAIN = 1.0; //1.0;
    
    // baseline is 7ft 9.25 in out - calc how far to go out and turn
    // 
    public static final double DEFAULT_AUTONOMOUS_LEFT_DISTANCE = 72;
    public static final double DEFAULT_AUTONOMOUS_LEFT_ANGLE = 60;

    public static final double DEFAULT_AUTONOMOUS_RIGHT_DISTANCE = 72;
    public static final double DEFAULT_AUTONOMOUS_RIGHT_ANGLE = -DEFAULT_AUTONOMOUS_LEFT_ANGLE;

    public static final double DEFAULT_AUTONOMOUS_MIDDLE_DISTANCE = 50;	// inches
    public static final double DEFAULT_AUTONOMOUS_MIDDLE_ANGLE = 0;    
    
    public static final double DEFAULT_GEAR_HOLDER_SERVO_OPEN_ANGLE = 360;

    public static final double DEFAULT_GEAR_DUMPER_UP = 180;
    public static final double DEFAULT_GEAR_DUMPER_DOWN = 40;
    public static final double DEFAULT_GEAR_DUMPER_BOOP = 90; // degrees
    public static final double DEFAULT_GEAR_DUMPER_BACKUP = 24; // inches
    public static final double DEFAULT_GEAR_DUMPER_BOOP_WAIT = 2; // seconds
    		
    public static final int COMPRESSOR_PORT = 0;
    
    public static void init() {
    	
    	clawDoubleSolenoid = new DoubleSolenoid(0, 1);
    	
        driveLineCANTalon1 = new WPI_TalonSRX(TALON_FRONT_LEFT);       
//        LiveWindow.addActuator("DriveLine", "CAN Talon 1", driveLineCANTalon1);
        
        driveLineCANTalon2 = new WPI_TalonSRX(TALON_BACK_LEFT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 2", driveLineCANTalon2);
        
        driveLineCANTalon3 = new WPI_TalonSRX(TALON_FRONT_RIGHT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 3", driveLineCANTalon3);
        
        driveLineCANTalon4 = new WPI_TalonSRX(TALON_BACK_RIGHT);
//        LiveWindow.addActuator("DriveLine", "CAN Talon 4", driveLineCANTalon4);
        
        driveLineRobotDrive = new RobotDrive(driveLineCANTalon1, driveLineCANTalon2,driveLineCANTalon3,driveLineCANTalon4);
        
        driveLineRobotDrive.setSafetyEnabled(true);
        driveLineRobotDrive.setExpiration(0.1);
        driveLineRobotDrive.setSensitivity(0.5);
        driveLineRobotDrive.setMaxOutput(1.0);

        driveLineAnalogGyro1 = new AnalogGyro(1);
        LiveWindow.addSensor("DriveLine", "AnalogGyro 1", driveLineAnalogGyro1);
        driveLineAnalogGyro1.setSensitivity(0.007);
//        driveLineQuadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
        driveLineQuadratureEncoderLeft = new Encoder(2, 3, false, EncodingType.k2X);
        
        LiveWindow.addSensor("DriveLine", "QuadratureEncoderLeft", driveLineQuadratureEncoderLeft);
        driveLineQuadratureEncoderLeft.setDistancePerPulse(-0.05);
        driveLineQuadratureEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
//        driveLineQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        driveLineQuadratureEncoderRight = new Encoder(0, 1, false, EncodingType.k2X);
        
        LiveWindow.addSensor("DriveLine", "QuadratureEncoderRight", driveLineQuadratureEncoderRight);
        driveLineQuadratureEncoderRight.setDistancePerPulse(0.05);
        driveLineQuadratureEncoderRight.setPIDSourceType(PIDSourceType.kRate);
//        ballPickupSubsystemBallDumpServo1 = new Servo(1);
//        LiveWindow.addActuator("BallPickupSubsystem", "BallDumpServo1", ballPickupSubsystemBallDumpServo1);
//        
//        ballPickupSubsystemBallDumpServo2 = new Servo(2);
//        LiveWindow.addActuator("BallPickupSubsystem", "BallDumpServo2", ballPickupSubsystemBallDumpServo2);
//        
//        ballPickupSubsystemVictorSpeedController = new Victor(0);
//        LiveWindow.addActuator("BallPickupSubsystem", "VictorSpeedController", (Victor) ballPickupSubsystemVictorSpeedController);
//        
//        liftSubsystemCANTalon5 = new Talon(5);
//        LiveWindow.addActuator("LiftSubsystem", "CAN Talon 5", liftSubsystemCANTalon5);
//        
//        liftSubsystemCANTalon6 = new Talon(6);
//        LiveWindow.addActuator("LiftSubsystem", "CAN Talon 6", liftSubsystemCANTalon6);
//        
//        liftSubsystemLiftSubsystemDrive = new RobotDrive(liftSubsystemCANTalon5, liftSubsystemCANTalon6);
//        
//        liftSubsystemLiftSubsystemDrive.setSafetyEnabled(true);
//        liftSubsystemLiftSubsystemDrive.setExpiration(0.1);
//        liftSubsystemLiftSubsystemDrive.setSensitivity(0.5);
//        liftSubsystemLiftSubsystemDrive.setMaxOutput(1.0);
//
//        liftSubsystemLiftSubsystemQuadratureEncoder = new Encoder(8, 9, false, EncodingType.k4X);
//        LiveWindow.addSensor("LiftSubsystem", "LiftSubsystemQuadratureEncoder", liftSubsystemLiftSubsystemQuadratureEncoder);
//        liftSubsystemLiftSubsystemQuadratureEncoder.setDistancePerPulse(1.0);
//        liftSubsystemLiftSubsystemQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
//        robotStateAutonomousMode = new DigitalInput(4);
//        LiveWindow.addSensor("RobotState", "AutonomousMode", robotStateAutonomousMode);
//        
//        robotStateAutonomousSide = new DigitalInput(5);
//        LiveWindow.addSensor("RobotState", "AutonomousSide", robotStateAutonomousSide);
//        
//        gearHolderGearHolderServo = new Servo(3);
//        LiveWindow.addActuator("GearHolder", "GearHolderServo", gearHolderGearHolderServo);
//        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
