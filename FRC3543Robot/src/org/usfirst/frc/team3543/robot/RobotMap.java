// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3543.robot;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.usfirst.frc.team3543.robot.util.Config;
import org.usfirst.frc.team3543.robot.util.RobotConfig;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap implements RobotConfig {
	private Config<Double> calibration = new Config<>();
	private Config<Integer> wiring = new Config<>();
//	private Config<Boolean> flags = new Config<>();
		
	// This holds a singleton instance
	private static RobotMap _instance = new RobotMap();
	
	public enum AutonomousMode {
		LEFT,
		MIDDLE,
		RIGHT
	};
	
	/**
	 * This fetches the singleton instance
	 * @return
	 */
	public static RobotMap getInstance() {
		return _instance;
	}
	
	public RobotMap initFromPropertyFiles() {
		Robot.LOGGER.info("Initialize RobotMap from property files");
		Properties wiringProps = loadFromFileOnClasspath("wiring.properties");
		Properties calibrationProps = loadFromFileOnClasspath("calibration.properties");			
		this.initWiring(wiringProps);
		this.initCalibration(calibrationProps);	
		return this;
	}
	
	
	private Properties loadFromStream(InputStream is) throws IOException {
		if (is == null) {
			throw new RuntimeException("Null InputStream");
		}
		Properties props = new Properties();
		props.load(is);		
		return props;		
	}
	
	private Properties loadFromFileOnClasspath(String propsFile) {
		try {
			return loadFromStream(getClass().getResourceAsStream(propsFile));
		} catch (IOException e) {
			Robot.LOGGER.warning(String.format("Could not find %s on classpath", propsFile));
			throw new IllegalArgumentException(e);
		}
	}	
	protected void initWiring(Properties props) {
		this.wiring = new Config<Integer>();
		for (Object k : props.keySet()) {
			String key = String.valueOf(k);
			this.wiring.put(key, Integer.valueOf(props.getProperty(key)));
		}
	}

	protected void initCalibration(Properties props) {
		this.calibration = new Config<Double>();
		for (Object k : props.keySet()) {
			String key = String.valueOf(k);
			this.calibration.put(key, Double.valueOf(props.getProperty(key)));
		}
	}
	
    public static final int TALON_FRONT_LEFT = 1;
    public static final int TALON_BACK_LEFT = 2;
    public static final int TALON_FRONT_RIGHT = 3;
    public static final int TALON_BACK_RIGHT = 4;
    
	public static final String AXIS_CAMERA_HOST = "10.35.43.11";
    public static final int USB_CAMERA_PORT = 0;
    public static final double GEAR_APPROACH_SPEED_GAIN = 0.20;	// gain function for the gear-approach feedback controller 
    public static final double GEAR_APPROACH_CURVE_GAIN = -1;	// gain function for the gear-approach feedback controller 
    
    public static final double GEAR_SEARCH_GAIN = 0.4;	// gain function for the gear-search feedback controller
	public static final double MAX_SPEED = 0.25;
	public static final double MIN_SPEED = 0.12;	
    public static final double DEFAULT_DISTANCE_PER_PULSE = 0.0284; // this is comp
    
    
    public static final double GYRO_SENSITIVITY = 0.0019;	// volts per degree per second
    public static final double GYRO_FEEDBACK_GAIN = 35;	// volts per degree per second based on full turn at 15 degrees off
    
    public static final double DEFAULT_LINEAR_GAIN = 0.25;
    public static final double DEFAULT_ROTATION_GAIN = 0.27;
    
    public void init() {

    }

	@Override
	public Config<Integer> getWiringConfig() {
		return this.wiring;
	}

	@Override
	public Config<Double> getCalibrationConfig() {
		return this.calibration;
	}
        
}
